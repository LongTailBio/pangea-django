# Generated by Django 3.0.3 on 2020-02-06 13:49

import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import pangea.core.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('created_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('created_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('metadata', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='SampleAnalysisResult',
            fields=[
                ('created_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('module_name', models.TextField(db_index=True)),
                ('replicate', models.TextField(default=pangea.core.models.random_replicate_name)),
                ('status', models.TextField(choices=[('pending', 'Pending'), ('error', 'Error'), ('working', 'Working'), ('success', 'Success')], default='pending')),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analysis_result_set', to='core.Sample')),
            ],
            options={
                'unique_together': {('module_name', 'replicate', 'sample')},
            },
        ),
        migrations.CreateModel(
            name='SampleGroup',
            fields=[
                ('created_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('description', models.TextField(default='')),
                ('is_library', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=True)),
                ('theme', models.TextField(blank=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.Organization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleGroupAnalysisResult',
            fields=[
                ('created_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('module_name', models.TextField(db_index=True)),
                ('replicate', models.TextField(default=pangea.core.models.random_replicate_name)),
                ('status', models.TextField(choices=[('pending', 'Pending'), ('error', 'Error'), ('working', 'Working'), ('success', 'Success')], default='pending')),
                ('sample_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analysis_result_set', to='core.SampleGroup')),
            ],
            options={
                'unique_together': {('module_name', 'replicate', 'sample_group')},
            },
        ),
        migrations.CreateModel(
            name='SampleGroupAnalysisResultField',
            fields=[
                ('created_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('stored_data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('analysis_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='core.SampleGroupAnalysisResult')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleAnalysisResultField',
            fields=[
                ('created_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.TextField(unique=True)),
                ('stored_data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('analysis_result', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fields', to='core.SampleAnalysisResult')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='sample',
            name='library',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_samples', to='core.SampleGroup'),
        ),
        migrations.AddField(
            model_name='sample',
            name='sample_groups',
            field=models.ManyToManyField(to='core.SampleGroup'),
        ),
        migrations.AlterUniqueTogether(
            name='sample',
            unique_together={('name', 'library')},
        ),
    ]
